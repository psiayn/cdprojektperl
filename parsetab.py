
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARRNAME BLOCKCL BLOCKOP CL COMMA COMMENT DIV EQ GT ID IF LT MIN MUL MY NUMBER OP PLS PRINT SEMI STRING UNTIL USE VARNAME\n    start : start command\n          | empty\n    \n    command : use \n            | print \n            | var_decl \n            | arr_decl \n            | until\n    \n    use : USE ID SEMI\n    \n    var_decl : MY VARNAME SEMI\n             | MY VARNAME EQ STRING SEMI\n             | MY VARNAME EQ NUMBER SEMI\n    \n    arr_decl : MY ARRNAME SEMI\n             | MY ARRNAME EQ OP array_init CL SEMI\n    \n    array_init : STRING COMMA array_init\n                | NUMBER COMMA array_init\n                | STRING \n                | NUMBER\n    \n    until : UNTIL OP expr CL BLOCKOP command BLOCKCL\n    \n    print : PRINT STRING SEMI\n         | PRINT NUMBER SEMI\n    \n    expr : VARNAME GT NUMBER\n         | VARNAME LT NUMBER\n         | VARNAME EQ EQ NUMBER\n         | VARNAME GT EQ NUMBER\n         | VARNAME LT EQ NUMBER\n         | VARNAME EQ EQ VARNAME\n         | VARNAME GT EQ VARNAME\n         | VARNAME LT EQ VARNAME\n         | VARNAME GT VARNAME\n         | VARNAME LT VARNAME\n         | VARNAME\n         | NUMBER GT NUMBER\n         | NUMBER LT NUMBER\n         | NUMBER EQ EQ NUMBER\n         | NUMBER GT EQ NUMBER\n         | NUMBER LT EQ NUMBER\n         | STRING EQ EQ NUMBER\n    \n    empty :\n    '
    
_lr_action_items = {'USE':([0,1,2,3,4,5,6,7,8,19,20,21,22,24,41,42,46,74,77,],[-38,9,-2,-1,-3,-4,-5,-6,-7,-8,-19,-20,-9,-12,-10,-11,9,-13,-18,]),'PRINT':([0,1,2,3,4,5,6,7,8,19,20,21,22,24,41,42,46,74,77,],[-38,10,-2,-1,-3,-4,-5,-6,-7,-8,-19,-20,-9,-12,-10,-11,10,-13,-18,]),'MY':([0,1,2,3,4,5,6,7,8,19,20,21,22,24,41,42,46,74,77,],[-38,11,-2,-1,-3,-4,-5,-6,-7,-8,-19,-20,-9,-12,-10,-11,11,-13,-18,]),'UNTIL':([0,1,2,3,4,5,6,7,8,19,20,21,22,24,41,42,46,74,77,],[-38,12,-2,-1,-3,-4,-5,-6,-7,-8,-19,-20,-9,-12,-10,-11,12,-13,-18,]),'$end':([0,1,2,3,4,5,6,7,8,19,20,21,22,24,41,42,74,77,],[-38,0,-2,-1,-3,-4,-5,-6,-7,-8,-19,-20,-9,-12,-10,-11,-13,-18,]),'BLOCKCL':([4,5,6,7,8,19,20,21,22,24,41,42,63,74,77,],[-3,-4,-5,-6,-7,-8,-19,-20,-9,-12,-10,-11,77,-13,-18,]),'ID':([9,],[13,]),'STRING':([10,18,23,32,61,62,],[14,29,30,44,44,44,]),'NUMBER':([10,18,23,32,34,35,37,38,49,52,53,55,57,58,59,61,62,],[15,28,31,45,48,51,54,56,65,67,69,70,71,72,73,45,45,]),'VARNAME':([11,18,34,35,49,52,53,],[16,27,47,50,64,66,68,]),'ARRNAME':([11,],[17,]),'OP':([12,25,],[18,32,]),'SEMI':([13,14,15,16,17,30,31,60,],[19,20,21,22,24,41,42,74,]),'EQ':([16,17,27,28,29,34,35,36,37,38,39,40,],[23,25,36,39,40,49,52,53,55,57,58,59,]),'CL':([26,27,43,44,45,47,48,50,51,54,56,64,65,66,67,68,69,70,71,72,73,75,76,],[33,-31,60,-16,-17,-29,-21,-30,-22,-32,-33,-27,-24,-28,-25,-26,-23,-35,-36,-34,-37,-14,-15,]),'GT':([27,28,],[34,37,]),'LT':([27,28,],[35,38,]),'BLOCKOP':([33,],[46,]),'COMMA':([44,45,],[61,62,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'empty':([0,],[2,]),'command':([1,46,],[3,63,]),'use':([1,46,],[4,4,]),'print':([1,46,],[5,5,]),'var_decl':([1,46,],[6,6,]),'arr_decl':([1,46,],[7,7,]),'until':([1,46,],[8,8,]),'expr':([18,],[26,]),'array_init':([32,61,62,],[43,75,76,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> start command','start',2,'p_start','parser.py',10),
  ('start -> empty','start',1,'p_start','parser.py',11),
  ('command -> use','command',1,'p_command','parser.py',17),
  ('command -> print','command',1,'p_command','parser.py',18),
  ('command -> var_decl','command',1,'p_command','parser.py',19),
  ('command -> arr_decl','command',1,'p_command','parser.py',20),
  ('command -> until','command',1,'p_command','parser.py',21),
  ('use -> USE ID SEMI','use',3,'p_use','parser.py',27),
  ('var_decl -> MY VARNAME SEMI','var_decl',3,'p_var_decl','parser.py',33),
  ('var_decl -> MY VARNAME EQ STRING SEMI','var_decl',5,'p_var_decl','parser.py',34),
  ('var_decl -> MY VARNAME EQ NUMBER SEMI','var_decl',5,'p_var_decl','parser.py',35),
  ('arr_decl -> MY ARRNAME SEMI','arr_decl',3,'p_arr_decl','parser.py',41),
  ('arr_decl -> MY ARRNAME EQ OP array_init CL SEMI','arr_decl',7,'p_arr_decl','parser.py',42),
  ('array_init -> STRING COMMA array_init','array_init',3,'p_array_init','parser.py',48),
  ('array_init -> NUMBER COMMA array_init','array_init',3,'p_array_init','parser.py',49),
  ('array_init -> STRING','array_init',1,'p_array_init','parser.py',50),
  ('array_init -> NUMBER','array_init',1,'p_array_init','parser.py',51),
  ('until -> UNTIL OP expr CL BLOCKOP command BLOCKCL','until',7,'p_until','parser.py',57),
  ('print -> PRINT STRING SEMI','print',3,'p_print','parser.py',64),
  ('print -> PRINT NUMBER SEMI','print',3,'p_print','parser.py',65),
  ('expr -> VARNAME GT NUMBER','expr',3,'p_expr','parser.py',71),
  ('expr -> VARNAME LT NUMBER','expr',3,'p_expr','parser.py',72),
  ('expr -> VARNAME EQ EQ NUMBER','expr',4,'p_expr','parser.py',73),
  ('expr -> VARNAME GT EQ NUMBER','expr',4,'p_expr','parser.py',74),
  ('expr -> VARNAME LT EQ NUMBER','expr',4,'p_expr','parser.py',75),
  ('expr -> VARNAME EQ EQ VARNAME','expr',4,'p_expr','parser.py',76),
  ('expr -> VARNAME GT EQ VARNAME','expr',4,'p_expr','parser.py',77),
  ('expr -> VARNAME LT EQ VARNAME','expr',4,'p_expr','parser.py',78),
  ('expr -> VARNAME GT VARNAME','expr',3,'p_expr','parser.py',79),
  ('expr -> VARNAME LT VARNAME','expr',3,'p_expr','parser.py',80),
  ('expr -> VARNAME','expr',1,'p_expr','parser.py',81),
  ('expr -> NUMBER GT NUMBER','expr',3,'p_expr','parser.py',82),
  ('expr -> NUMBER LT NUMBER','expr',3,'p_expr','parser.py',83),
  ('expr -> NUMBER EQ EQ NUMBER','expr',4,'p_expr','parser.py',84),
  ('expr -> NUMBER GT EQ NUMBER','expr',4,'p_expr','parser.py',85),
  ('expr -> NUMBER LT EQ NUMBER','expr',4,'p_expr','parser.py',86),
  ('expr -> STRING EQ EQ NUMBER','expr',4,'p_expr','parser.py',87),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',93),
]
